{"version":3,"sources":["ForInOfStatement.ion"],"names":["ion","Statement","DynamicExpression","ForInOfStatement","properties","toKey",{"type":"Identifier","name":"toKey","loc":{"start":{"line":8,"column":8,"fixed":true,"source":"ion/runtime/ForInOfStatement.ion"},"end":{"line":8,"column":13,"fixed":true,"source":"ion/runtime/ForInOfStatement.ion"}}},"name","type","parseInt","forEach","collection","callback","key","length","value","activate","statements","valueName","left","declarations","id","keyName","collectionExpression","context","createRuntime","right","unobserveExpression","observe","collectionWatcher","removeItem","unobserveCollection","addItem","collectionObserver","applyChanges","bind","priority","depth","deactivate","newContext","setVariableExpression","statement","body","disposeStatement","remove","removeStatement","summarize","changes","ignoreProperty","map","Map","object","oldValue","has","set","change","get","array","newValue","push","getRecycleKey","canRecycle","checkRecycleKeys","checkKey","recyclableStatements","activateStatements","rkey","variables","setValue","delete"],"mappings":"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","sourcesContent":["const\n    ion = import '../'\n    Statement = import './Statement'\n    DynamicExpression = import './DynamicExpression'\n\nexport class ForInOfStatement extends Statement\n    properties:\n        toKey: (name) ->\n            if @type is 'ForOfStatement'\n                return parseInt(name)\n            else\n                return name\n        forEach: (collection, callback) ->\n            # console.log('forEach', collection)\n            if @type is 'ForOfStatement'\n                for let key = 0; key < collection.length; key++\n                    let value = collection[key]\n                    callback(key, value)\n            else\n                for key, value of collection\n                    callback(key, value)\n        activate: ->\n            super\n\n            if not @statements?\n                @statements = {}            \n                @valueName = @left.declarations[@type is 'ForOfStatement' ? 0 : 1]?.id.name\n                @keyName = @left.declarations[@type is 'ForOfStatement' ? 1 : 0]?.id.name\n\n            # we must create new contexts for every item in the list thingy.\n            # console.log('ForEachStatement.activate', @)\n            @collectionExpression ?= @context.createRuntime(@right)\n            @unobserveExpression = @collectionExpression.observe(\n                @collectionWatcher ?= (collection) =>\n                    # console.log('collectionWatcher', collection)\n                    if @collection isnt collection\n                        if @collection?\n                            @forEach(\n                                @collection\n                                (key, value) =>\n                                    @removeItem(key, value)\n                            )\n                        @unobserveCollection?()\n                        @unobserveCollection = null\n                        @collection = collection\n                        if @collection?\n                            @forEach(\n                                @collection\n                                (key, value) =>\n                                    @addItem(key, value)\n                            )\n                            @unobserveCollection = ion.observe(@collection, (@collectionObserver ?= @applyChanges.bind(@)), {priority:@context.depth})\n            )\n        deactivate: ->\n            super\n            @collectionWatcher?(undefined)\n            @unobserveExpression()\n            @unobserveCollection?()\n        addItem: (key, value, activate = true) ->\n            # console.log('add ' + key + ' ' + value)\n            if value isnt undefined\n                # see if there is a cached statement with that value\n                let newContext = @context.newContext()\n                if @valueName?\n                    newContext.setVariableExpression(@valueName, new DynamicExpression({value:value}))\n                if @keyName?\n                    newContext.setVariableExpression(@keyName, new DynamicExpression({value:key}))\n                let statement = newContext.createRuntime(@body)\n                @statements[key] = statement\n                if activate\n                    statement.activate()\n                return statement\n        removeItem: (key, value) ->\n            let statement = @statements[key]\n            # console.log('remove ' + key + ' ' + value + ' ', statement)\n            if statement?\n                @disposeStatement(statement)\n            delete @statements[key]\n            return statement\n        disposeStatement: (statement) ->\n            # see if there is a remove function to call\n            if @remove?\n                let removeStatement = statement.context.createRuntime(@remove)\n                removeStatement.activate()\n                # now have to immediately deactivate the remove statement\n                removeStatement.deactivate()\n            statement.deactivate()\n        summarize: (changes) ->\n            let ignoreProperty = (name) =>\n                if not name?\n                    return true\n                if name[0] is '_'\n                    return true\n                if name is 'length' and @type is 'ForOfStatement'\n                    return true\n                return false\n            let map = new Map\n            for {type,object,name,oldValue} in changes\n                if not ignoreProperty(name)\n                    if not map.has(name)\n                        map.set(name, {type,object,name,oldValue})\n                    else\n                        let change = map.get(name)\n                        # update the type.\n                        change.type = type\n            let array = []\n            map.forEach(\n                (change, name, object)->\n                    let newValue = change.object[name]\n                    if newValue isnt change.oldValue\n                        delete change.object\n                        array.push(change)\n            )\n            return array\n        applyChanges: (changes) ->\n            # prune the change messages down\n            # console.log('changes before', JSON.stringify(changes))\n            changes = @summarize(changes)\n            # console.log('changes after', JSON.stringify(changes))\n            if changes.length is 0\n                return\n\n            let getRecycleKey = (key, value) => @type is 'ForOfStatement' ? value : key\n\n            # we can only use the fast recycle method IF there are no duplicate keys in the changes, and none are null\n            let canRecycle = true\n            let checkRecycleKeys = new Map\n            for {name, oldValue} in changes\n                let checkKey = getRecycleKey(name, oldValue)\n                if not checkKey or checkRecycleKeys.has(checkKey)\n                    canRecycle = false\n                    break\n\n            if not canRecycle\n                for {name,type,oldValue} in changes\n                    let newValue = @collection?[name]\n                    let key = @toKey(name)\n                    if oldValue isnt undefined\n                        @removeItem(key, oldValue)\n                    if newValue isnt undefined\n                        @addItem(key, newValue)\n            else\n                let recyclableStatements = new Map\n                let activateStatements = []\n                for {name,oldValue} in changes\n                    let key = @toKey(name)\n                    if oldValue isnt undefined\n                        let rkey = getRecycleKey(key, oldValue)\n                        let statement = @statements[key]\n                        if statement?\n                            delete @statements[key]\n                            recyclableStatements.set(rkey, statement)\n\n                for {name,oldValue} in changes\n                    let newValue = @collection?[name]\n                    let key = @toKey(name)\n                    if newValue isnt undefined\n                        let rkey = getRecycleKey(key, newValue)\n                        let statement = recyclableStatements.get(rkey)\n                        # let statement = null\n                        if statement?\n                            if @type is 'ForOfStatement'\n                                if @keyName?\n                                    statement.context.variables[@keyName].setValue(key)\n                            else\n                                if @valueName?\n                                    statement.context.variables[@valueName].setValue(newValue)\n                            @statements[key] = statement\n                            recyclableStatements.delete(rkey)\n                        else\n                            statement = @addItem(key, newValue, false)\n                            if statement?\n                                activateStatements.push(statement)\n\n                # it's important that old statements are deactivated BEFORE new statements are activated\n\n                # recyclableStatements are deactivated.\n                recyclableStatements.forEach(\n                    (statement) =>\n                        @disposeStatement(statement)\n                )\n\n                # activate new statements\n                for statement in activateStatements\n                    statement.activate()\n\n"]}