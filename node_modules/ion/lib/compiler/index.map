{"version":3,"sources":["index.ion"],"names":["ion","makePrettyError",{"type":"Identifier","name":"makePrettyError","loc":{"start":{"line":4,"column":4,"fixed":true,"source":"ion/compiler/index.ion"},"end":{"line":4,"column":19,"fixed":true,"source":"ion/compiler/index.ion"}}},"e","source","id","line","column","split","caret","i","newMessage","message","originalMessage","stack","parse","content","options","generate","compile","compileWithSourceMap","header","startsWith","loc","target","preprocessor","parser","postprocessor","escodegen","sourceMapping","result","preprocess","sourceMap","preprocessed","sourceLocationsFixed","dump","description","debug","console","log","JSON","stringify","fixSourceLocations","postprocess","generateOptions","sourceMapWithCode","global","window","sourceContent","verbatim","output","code","map","toString","fixSourceLocation"],"mappings":"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","sourcesContent":["\nconst\n    ion = import '../'\n    makePrettyError = (e, source, id) ->\n        if typeof e.line is 'number' and typeof e.column is 'number' and e.line > 0 and e.column > 0\n            let line = source.split('\\n')[e.line - 1]\n            let caret = '^'\n            for let i = 1; i < e.column; i++\n                caret = ' ' + caret\n            let newMessage = \"{{id ? '(anonymous)'}}:{{e.line}}:{{e.column}}: {{e.message}}\\n{{line}}\\n{{caret}}\"\n            e.originalMessage = e.message\n            e.message = newMessage\n            e.stack = newMessage # + '\\n' + e.stack\n\nexport const\n    parse = (content, options = {}) ->\n        options.generate = false\n        return compile(content, options)\n\n    compile = (content, options = {}) ->\n        return compileWithSourceMap(content, options)[0]\n\n    compileWithSourceMap = (content, options = {}) ->\n        let header = \"\"\n        if content.startsWith(\"#!\")\n            header = content.split(/\\r|\\n/)[0] + \"\\n\"\n\n        options.loc ?= true\n        options.target ?= 'es5'\n        const\n            preprocessor = import './preprocessor'\n            parser = import './parser'\n            postprocessor = import './postprocessor'\n            escodegen = import './escodegen'\n        let\n            sourceMapping = {}\n            result = preprocessor.preprocess(content, sourceMapping)\n\n            sourceMap = null\n            preprocessed = result\n            sourceLocationsFixed = false\n            dump = (description) ->\n                if options.debug\n                    console.log('-' + description + '--------------------------------------')\n                    console.log(typeof result is 'string' ? result : JSON.stringify(result, null, '  '))\n                    console.log('---------------------------------------------------')\n        try\n            dump('Preprocessed')\n            result = parser.parse(result, options)\n            dump('Parsed')\n            result = preprocessor.fixSourceLocations(result, sourceMapping, options.source)\n            sourceLocationsFixed = true\n            if options.postprocess isnt false\n                result = postprocessor.postprocess(result, options)\n                if options?.generate isnt false\n                    let generateOptions =\n                        sourceMapWithCode: true\n                        if not global.window?\n                            sourceMap: options.sourceMap ? options.source\n                        sourceContent: content\n                        verbatim: 'verbatim'\n                    let output = escodegen.generate(result, generateOptions)\n                    result = output.code\n                    dump('Generated')\n                    sourceMap = output.map?.toString()\n        catch e\n            if not sourceLocationsFixed\n                preprocessor.fixSourceLocation(e, sourceMapping)\n            # console.log('-Preprocessed--------------------------------------------')\n            # console.log(preprocessed)\n            makePrettyError(e, content, options.id)\n            throw e\n        return [header + result,sourceMap]\n"]}