{"version":3,"sources":["mergePatch.ion"],"names":["ion","isObject",{"type":"Identifier","name":"isObject","loc":{"start":{"line":3,"column":4,"fixed":true,"source":"ion/mergePatch.ion"},"end":{"line":3,"column":12,"fixed":true,"source":"ion/mergePatch.ion"}}},"a","type","deleteValue","canSetProperty","object","key","merge","target","values","options","deleteNull","constructor","Object","factory","value","newValue","combine","patch1","patch2","watch","handler","callInitial","Error","subWatchers","pendingPatch","processPatch","patchValues","name","subHandler","patch","basePatch","queuePatch","pendingTimeout","setTimeout","watcher","changes","change","DEBUG","innerWatcher","e","console","error","observe","unobserve","diff","oldValue","hasOwnProperty","propertyDiff","isChange","test","equal","b","c","d","double","x","f","done","source","age","children","Sadera","grandchildren","One","Two","Orion","Third","clone","unwatch","three","checkForChanges"],"mappings":"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","sourcesContent":["const\n    ion = import './'\n    isObject = (a) ->\n        let type = typeof a\n        return a? and type is 'object' or type is 'function'\n    deleteValue = null\n\nexport const\n    canSetProperty = (object, key) -> not (typeof object is 'function' and key is 'name')\n    # options:\n    #   deleteNull: delete properties if value is null, default: true\n    #   factory: function to use when constructing new objects, defaults to using plain objects {}\n    merge = (target, values, options) ->\n        let deleteNull = options?.deleteNull ? true\n        if values?.constructor isnt Object\n            return values\n        if not isObject(target)\n            if options?.factory?\n                target = options.factory(values)\n            else\n                target = {}\n        for key, value of values\n            if deleteNull and value is deleteValue\n                delete target[key]\n            else\n                let newValue = merge(target[key], value, options)\n                if canSetProperty(target, key)\n                    target[key] = newValue\n        return target\n    # combines two patches to make a single patch\n    combine = (patch1, patch2) -> merge(patch1, patch2, {deleteNull:false})\n    # watches object for changes and calls the handler with patches\n    watch = (object, handler, callInitial = true) ->\n        if not isObject(object)\n            throw new Error(\"Cannot watch: #{object}\")\n        # recurse watching and unwatching\n        let subWatchers = {}\n        # pending patch allows several changes at simultaneous levels of the\n        # heirarchy to be combined into a single patch call\n        let pendingPatch = null\n        let processPatch = (patchValues) ->\n            # watch sub objects\n            for name of patchValues\n                # unwatch any current value being watched\n                subWatchers[name]?()\n                # now watch sub values if we can\n                let value = object[name]\n                if isObject(value)\n                    do (name) ->\n                        let subHandler = (patch) ->\n                            let basePatch = {}\n                            basePatch[name] = patch\n                            queuePatch(basePatch)\n                        subWatchers[name] = watch(value, subHandler, false)\n        let pendingTimeout = null\n        let queuePatch = (patch) ->\n            if not callInitial\n                handler(patch)\n            else\n                pendingPatch = combine(pendingPatch, patch)\n                processPatch(pendingPatch)\n                pendingTimeout ?= setTimeout(\n                    ->\n                        handler(pendingPatch)\n                        pendingPatch = null\n                        pendingTimeout = null\n                    0\n                )\n        let watcher = (changes) ->\n            let patch = {}\n            for change in changes\n                # we ignore names that start with underscore, they are considered private\n                if change.name[0] isnt '_'\n                    patch ?= {}\n                    # we convert undefined values from delete into explicit nulls\n                    patch[change.name] = object[change.name] ? deleteValue\n            if patch?\n                queuePatch(patch)\n        if DEBUG\n            let innerWatcher = watcher\n            watcher = (changes) ->\n                try\n                    innerWatcher(changes)\n                catch e\n                    # catch and log errors, because object observe callbacks suppress errors\n                    console.error(e)\n\n        # call process patch on the object to watch children\n        processPatch(object)\n        ion.observe(object, watcher)\n        # return an function that lets us unwatch\n        return ->\n            ion.unobserve(object, watcher)\n            # unwatch subWatchers\n            for key, value of subWatchers\n                value()\n    diff = (oldValue, newValue) ->\n        # returns a patch which can convert from the oldValue to the newValue\n        # returns undefined if there is no difference between them\n        # the patch SHOULD be treated as readonly, since it may reference pre-existing objects\n        if oldValue is newValue\n            return undefined\n        if not(oldValue? and newValue? and typeof newValue is 'object' and typeof oldValue is 'object')\n            return newValue ? null\n        let patch = undefined\n        for name of oldValue if oldValue.hasOwnProperty(name)\n            let propertyDiff = diff(oldValue[name], newValue[name])\n            if propertyDiff isnt undefined\n                patch ?= {}\n                patch[name] = propertyDiff\n        for name of newValue if newValue.hasOwnProperty(name) and not oldValue.hasOwnProperty(name)\n            patch ?= {}\n            patch[name] = newValue[name]\n        return patch\n    isChange = (oldValue, newValue) ->\n        # returns true if a newValue will change the old value\n        # returns false if a newValue will not change the old value\n        if oldValue is newValue\n            return false\n        if not (oldValue? and newValue? and typeof newValue is 'object' and typeof oldValue is 'object')\n            return true\n        for name of newValue\n            if newValue[name] is null and not oldValue.hasOwnProperty(name)\n                continue\n            if isChange(oldValue[name], newValue[name])\n                return true\n        return false\n    test = do ->\n        const equal = (a, b) -> not isChange(a, b) and not isChange(b, a)\n        return\n            merge: ->\n                assert equal({a:{b:2,c:3},d:4}, merge({a:{b:2}}, {a:{c:3},d:4}))\n                assert equal({b:2}, merge(null, {b:2}))\n                assert equal({a:1,b:2}, merge({a:1,b:2,c:3}, {c:undefined}))\n                let double = (x) -> x * 2\n                assert equal({a:double}, merge({},{a:double}))\n            isChange: ->\n                assert isChange({a:1}, null)\n                assert not isChange(null, null)\n                assert isChange(undefined, null)\n                assert isChange(null, undefined)\n                assert not isChange({a:1}, {a:1})\n                assert not isChange({a:{b:2,c:3}}, {a:{b:2}})\n                assert isChange({a:{b:2}}, {a:{b:3}})\n                assert not isChange({a:1}, {b:null})\n            diff: ->\n                assert equal({b:2}, diff({a:1}, {a:1,b:2}))\n                assert equal({a:{b:3,c:null}}, diff({a:{b:2,c:4}}, {a:{b:3}}))\n                assert equal({a:1}, diff(null, {a:1}))\n                assert equal({c:{d:{f:4}}}, diff({a:1,b:2,c:{d:{e:1,f:2}}}, {a:1,b:2,c:{d:{e:1,f:4}}}))\n                assert equal(null, diff({a:1}, undefined))\n                assert equal(null, diff({a:1}, null))\n                assert equal(undefined, diff({a:{b:2}}, {a:{b:2}}))\n            observe: (done) ->\n                if not Object.observe?\n                    return done(null, \"Object.observe missing.\")\n                let source =\n                    name: 'Kris'\n                    age: 41\n                    children: \n                        Sadera:\n                            grandchildren:\n                                One: 1\n                                Two: 2\n                        Orion: {}\n                        Third: {}\n                let target = ion.clone(source, true)\n                let unwatch = watch(\n                    source\n                    (patch) ->\n                        target = merge(target, patch)\n                        # should be immediate assert\n                        if equal(source, target)\n                            done()\n                            unwatch()\n                )\n                source:\n                    name: 'Fred'\n                    children:\n                        Orion:\n                            a: 1\n                            b: 2\n                            c: 12\n                        Sadera:\n                            grandchildren:\n                                three: 3\n                # todo: delete a property in a literal?\n                delete source.children.Third\n                # temp requirement\n                ion.checkForChanges()\n"]}