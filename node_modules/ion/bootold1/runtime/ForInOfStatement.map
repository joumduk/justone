{"version":3,"sources":["ForInOfStatement.ion"],"names":["ion","Statement","DynamicExpression","ForInOfStatement","properties","toKey",{"type":"Identifier","name":"toKey","loc":{"start":{"line":8,"column":8,"fixed":true,"source":"ion/runtime/ForInOfStatement.ion"},"end":{"line":8,"column":13,"fixed":true,"source":"ion/runtime/ForInOfStatement.ion"}}},"name","type","parseInt","forEach","collection","callback","key","length","value","activate","statements","valueName","left","declarations","id","keyName","collectionExpression","context","createRuntime","right","watchValue","collectionWatcher","removeItem","unobserve","collectionObserver","addItem","observe","applyChanges","bind","deactivate","unwatchValue","newContext","setVariableExpression","statement","body","disposeStatement","remove","removeStatement","summarize","changes","ignoreProperty","map","Map","object","oldValue","has","set","change","get","array","newValue","push","recyclableStatements","getRecycleKey","activateStatements","rkey","variables","setValue","delete"],"mappings":"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","sourcesContent":["const\n    ion = import '../'\n    Statement = import './Statement'\n    DynamicExpression = import './DynamicExpression'\n\nexport class ForInOfStatement extends Statement\n    properties:\n        toKey: (name) ->\n            if @type is 'ForOfStatement'\n                return parseInt(name)\n            else\n                return name\n        forEach: (collection, callback) ->\n            # console.log('forEach', collection)\n            if @type is 'ForOfStatement'\n                for let key = 0; key < collection.length; key++\n                    let value = collection[key]\n                    callback(key, value)\n            else\n                for key, value of collection\n                    callback(key, value)\n        activate: ->\n            super\n\n            if not @statements?\n                @statements = {}            \n                @valueName = @left.declarations[@type is 'ForOfStatement' ? 0 : 1]?.id.name\n                @keyName = @left.declarations[@type is 'ForOfStatement' ? 1 : 0]?.id.name\n\n            # we must create new contexts for every item in the list thingy.\n            # console.log('ForEachStatement.activate', @)\n            @collectionExpression ?= @context.createRuntime(@right)\n            @collectionExpression.watchValue(\n                @collectionWatcher ?= (collection) =>\n                    # console.log('collectionWatcher', collection)\n                    if @collection isnt collection\n                        if @collection?\n                            @forEach(\n                                @collection\n                                (key, value) =>\n                                    @removeItem(key, value)\n                            )\n                            ion.unobserve(@collection, @collectionObserver)\n                        @collection = collection\n                        if @collection?\n                            @forEach(\n                                @collection\n                                (key, value) =>\n                                    @addItem(key, value)\n                            )\n                            ion.observe(@collection, @collectionObserver ?= @applyChanges.bind(@))\n            )\n        deactivate: ->\n            super\n            @collectionExpression.unwatchValue(@collectionWatcher)\n        addItem: (key, value, activate = true) ->\n            # console.log('add ' + key + ' ' + value)\n            if value isnt undefined\n                # see if there is a cached statement with that value\n                let newContext = @context.newContext()\n                if @valueName?\n                    newContext.setVariableExpression(@valueName, new DynamicExpression({value:value}))\n                if @keyName?\n                    newContext.setVariableExpression(@keyName, new DynamicExpression({value:key}))\n                let statement = newContext.createRuntime(@body)\n                @statements[key] = statement\n                if activate\n                    statement.activate()\n                return statement\n        removeItem: (key, value) ->\n            let statement = @statements[key]\n            # console.log('remove ' + key + ' ' + value + ' ', statement)\n            if statement?\n                @disposeStatement(statement)\n            delete @statements[key]\n            return statement\n        disposeStatement: (statement) ->\n            # see if there is a remove function to call\n            if @remove?\n                let removeStatement = statement.context.createRuntime(@remove)\n                removeStatement.activate()\n            statement.deactivate()\n        summarize: (changes) ->\n            let ignoreProperty = (name) =>\n                if not name?\n                    return true\n                if name[0] is '_'\n                    return true\n                if name is 'length' and @type is 'ForOfStatement'\n                    return true\n                return false\n            let map = new Map\n            for {type,object,name,oldValue} in changes\n                if not ignoreProperty(name)\n                    if not map.has(name)\n                        map.set(name, {type,object,name,oldValue})\n                    else\n                        let change = map.get(name)\n                        # update the type.\n                        change.type = type\n            let array = []\n            map.forEach(\n                (change, name, object)->\n                    let newValue = change.object[name]\n                    if newValue isnt change.oldValue\n                        delete change.object\n                        array.push(change)\n            )\n            return array\n        applyChanges: (changes) ->\n            # prune the change messages down\n            # console.log('changes before', JSON.stringify(changes))\n            changes = @summarize(changes)\n            # console.log('changes after', JSON.stringify(changes))\n            if changes.length is 0\n                return\n\n            # for {name,type,oldValue} in changes\n            #     let newValue = @collection[name]\n            #     let key = @toKey(name)\n            #     if oldValue isnt undefined\n            #         @removeItem(key, oldValue)\n            #     if newValue isnt undefined\n            #         @addItem(key, newValue)\n\n            let recyclableStatements = new Map\n            let getRecycleKey = (key, value) => @type is 'ForOfStatement' ? value : key\n            let activateStatements = []\n\n            for {name,oldValue} in changes\n                let key = @toKey(name)\n                if oldValue isnt undefined\n                    let rkey = getRecycleKey(key, oldValue)\n                    let statement = @statements[key]\n                    if statement?\n                        delete @statements[key]\n                        recyclableStatements.set(rkey, statement)\n\n            for {name,oldValue} in changes\n                let newValue = @collection[name]\n                let key = @toKey(name)\n                if newValue isnt undefined\n                    let rkey = getRecycleKey(key, newValue)\n                    let statement = recyclableStatements.get(rkey)\n                    # let statement = null\n                    if statement?\n                        if @type is 'ForOfStatement'\n                            if @keyName?\n                                statement.context.variables[@keyName].setValue(key)\n                        else\n                            if @valueName?\n                                statement.context.variables[@valueName].setValue(newValue)\n                        @statements[key] = statement\n                        recyclableStatements.delete(rkey)\n                    else\n                        statement = @addItem(key, newValue, false)\n                        if statement?\n                            activateStatements.push(statement)\n\n            # it's important that old statements are deactivated BEFORE new statements are activated\n\n            # recyclableStatements are deactivated.\n            recyclableStatements.forEach(\n                (statement) =>\n                    @disposeStatement(statement)\n            )\n\n            # activate new statements\n            for statement in activateStatements\n                statement.activate()\n\n"]}