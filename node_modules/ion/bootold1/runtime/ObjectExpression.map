{"version":3,"sources":["ObjectExpression.ion"],"names":["ion","DynamicExpression","ObjectExpression","properties","setLeftValue",{"type":"Identifier","name":"setLeftValue","loc":{"start":{"line":8,"column":8,"fixed":true,"source":"ion/runtime/ObjectExpression.ion"},"end":{"line":8,"column":20,"fixed":true,"source":"ion/runtime/ObjectExpression.ion"}}},"value","activate","typeExpression","context","createRuntime","objectType","watchValue","typeWatcher","type","is","statements","deactivate","newContext","body","setValue","unwatchValue"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,iBAAA,G,OAAoB,CAAO,qBAAP,CAFxB;IAIaC,gB;;QACTC,UAAA,EAAW;AAAA,YAEPC,YAAA,EAAcC,UAACC,KAADD,EACtB;AAAA,gBAAY,KAACC,KAAD,GAASA,KAAT,CAAZ;AAAA,aAHe;AAAA,YAIPC,QAAA,EAAUF,YAClB;AAAA,gB,iCADQE,Q,uBACI,CAAZ;AAAA,gBACY,KAACC,cAAD,QAACA,c,WAAD,KAACA,c,GAAkB,KAACC,OAAD,CAASC,aAAT,CAAuB,KAACC,U,WAAD,KAACA,U,GAAa,IAArC,CAAnB,CADZ;AAAA,gBAEY,KAACH,cAAD,CAAgBI,UAAhB,CACI,KAACC,WAAD,QAACA,W,WAAD,KAACA,W,YAAe,UAACC,IAAD,EAChC;AAAA,oBAAoB,IAAIR,KAAJ,CAApB;AAAA,oBACoB,IAAG,CAAIN,GAAA,CAAIe,EAAJ,CAAO,KAACT,KAAR,EAAeQ,IAAf,CAAP,EACpB;AAAA,wBAAwB,KAACE,U,WAAD,KAACA,UAAD,CAAaC,UAAb,E,SAAA,CAAxB;AAAA,wBACwB,KAACD,UAAD,GAAc,IAAd,CADxB;AAAA,wBAEwBV,KAAA,GAAQQ,I,WAAAA,I,GAAO,EAAf,CAFxB;AAAA,qBADoB,MAMpB;AAAA,wBAAwBR,KAAA,GAAQ,KAACA,KAAT,CAAxB;AAAA,qBAPA;AAAA,oBASoB,IAAGA,K,QAAA,IAAW,C,CAAI,KAACU,U,SAAnB,EACpB;AAAA,wBAAwB,IAAIE,UAAA,GAAa,KAACT,OAAD,CAASS,UAAT,CAAoBZ,KAApB,CAAjB,CAAxB;AAAA,wBACwB,KAACU,UAAD,GAAcE,UAAA,CAAWR,aAAX,CAAyB;AAAA,4BAACI,IAAA,EAAK,gBAAN;AAAA,4BAAwBK,IAAA,EAAK,KAAChB,UAA9B;AAAA,yBAAzB,CAAd,CADxB;AAAA,wBAEwB,KAACa,UAAD,CAAYT,QAAZ,GAFxB;AAAA,qBAVA;AAAA,oBAcoB,KAACa,QAAD,CAAUd,KAAV,EAdpB;AAAA,iB,OAFY,EAFZ;AAAA,aALe;AAAA,YAyBPW,UAAA,EAAYZ,YACpB;AAAA,gB,iCADQY,U,uBACI,CAAZ;AAAA,gBACY,KAACT,cAAD,CAAgBa,YAAhB,CAA6B,KAACR,WAA9B,EADZ;AAAA,aA1Be;AAAA,S;OADuBZ,iB,EAJtC;2BAIaC,gB","sourcesContent":["const\n    ion = import '../'\n    DynamicExpression = import './DynamicExpression'\n\nexport class ObjectExpression extends DynamicExpression\n    properties:\n        # this is called by a PropertyExpression to let us know the current left hand value.\n        setLeftValue: (value) ->\n            @value = value\n        activate: ->\n            super\n            @typeExpression ?= @context.createRuntime(@objectType ? null)\n            @typeExpression.watchValue(\n                @typeWatcher ?= (type) =>\n                    let value\n                    if not ion.is(@value, type)\n                        @statements?.deactivate()\n                        @statements = null\n                        value = type ? {}\n                    else\n                        # a default value could have been passed in\n                        value = @value\n\n                    if value? and not @statements?\n                        let newContext = @context.newContext(value)\n                        @statements = newContext.createRuntime({type:'BlockStatement', body:@properties})\n                        @statements.activate()\n\n                    @setValue(value)\n            )\n        deactivate: ->\n            super\n            @typeExpression.unwatchValue(@typeWatcher)\n"]}