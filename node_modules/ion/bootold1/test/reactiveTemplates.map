{"version":3,"sources":["reactiveTemplates.ion"],"names":["ion","object","x","y","templates","name","a","b","c","z","factor","items","sum",{"type":"Identifier","name":"sum","loc":{"start":{"line":74,"column":12,"fixed":true,"source":"ion/test/reactiveTemplates.ion"},"end":{"line":74,"column":15,"fixed":true,"source":"ion/test/reactiveTemplates.ion"}}},"one","deep","touch","alpha","beta","charlie","next","nextId","id","number","index","key","value","thisArg","templateType","argument","patch","expected","done","template","call","checkIfDone","check","JSON","stringify","deactivate","activate","watchValue","observe","changes","checkForChanges","test"],"mappings":"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","sourcesContent":["const ion = import '../'\n\nconst templates = []\n    []\n        \"regular expression\"\n        {}\n        template (properties) ->\n            return properties.name.replace(/a/g, 'b')\n        {name:\"alpha\"}\n        {}\n        \"blphb\"\n    []\n        \"array comprehension for of\"\n        {}\n        template (properties) ->\n            return [key for key of properties]\n        {a:1,b:2}\n        {b:undefined,c:3}\n        ['a','c']\n    []\n        \"imperative functions\"\n        {}\n        template (properties) ->\n            const double(a) -> a * 2\n            return {}\n                for key, value of properties\n                    [key]: double(value)\n        {x:1,y:2}\n        {x:4,z:3,y:undefined}\n        {x:8,y:4,z:6}\n    []\n        \"for else statements\"\n        {}\n        template (properties) ->\n            return {}\n                for key, value of properties\n                    [key]: value\n                else\n                    [key]: undefined\n        {x:1,y:2}\n        {x:4,y:undefined,z:3}\n        {x:4,z:3}\n    []\n        \"shared variables functions\"\n        {}\n        template (properties) ->\n            let factor = properties.factor ? 3\n            const multiply(a) -> a * factor\n            return {}\n                for key, value of properties if key isnt 'factor'\n                    [key]: multiply(value)\n        {x:1,y:2}\n        {x:4,y:undefined,z:5,factor:10}\n        {x:40,y:6,z:50}\n    []\n        \"reactive destructured parameters\"\n        {}\n        template ({a,b}) -> a + b\n        {a:1,b:2}\n        {a:5}\n        7\n    []\n        \"array comprehension for in\"\n        {}\n        template ({items}) -> [x + i for x, i in items]\n        {items:[1,2,3]}\n        {items:{3:4}}\n        [1,3,5,7]\n    []\n        \"changing object with function\"\n        {}\n        template (object) -> object.sum()\n        {}\n            sum: -> @x + @y\n            x: 1\n            y: 2\n        {}\n            x: 6\n        8\n    []\n        \"nested templates\"\n        {}\n        do ->\n            return template (object) ->\n                let factor = 2\n                let sum = template ({deep:{a,b}}) ->\n                    return (a + b) * factor\n                return sum(object.one)\n        {}\n            one:\n                deep:\n                    a: 1\n                    b: 2\n        {}\n            one:\n                deep:\n                    a: 2\n        8\n    []\n        \"literal objects\"\n        {}\n        template () ->\n            return {touch:1,\"touch-start\":2}\n        {}\n        {}\n        {touch:1,\"touch-start\":2}\n    []\n        \"this\"\n        let object = {x:1,y:2}\n        object\n        template -> this.x + this.y\n        object\n        {x:10}\n        12\n    do ->\n        # this test verifies that statements are reused when a value shifts within an array\n        let alpha = 100\n        let beta = 200\n        let charlie = 300\n        let next = 0\n        let nextId = -> next++\n        return []\n            \"for in reuse values\"\n            {}\n            template (items) ->\n                return []\n                    for item, index in items\n                        { id: nextId(), number: item, index: index }\n            [alpha,beta,charlie]\n            {0:alpha,1:charlie,2:undefined}\n            [{id:0,number:alpha,index:0},{id:2,number:charlie,index:1}]\n    do ->\n        # this test verifies that statements are reused when a value shifts within an array\n        let next = 0\n        let nextId = -> next++\n        return []\n            \"for of reuse keys\"\n            {}\n            template (items) ->\n                return []\n                    for key, value of items\n                        { id: nextId(), key: key, value: value }\n            {alpha:1,beta:2,charlie:3}\n            {beta:3,charlie:undefined}\n            [{id:0,key:'alpha',value:1},{id:1,key:'beta',value:3}]\n\nexport\n    test:\n        for [name, thisArg, templateType,argument,patch,expected] in templates if expected?\n            [name]: do (thisArg, templateType, argument, patch, expected) ->\n                return (done) ->\n                    let template = templateType.call(thisArg, argument)\n                    const checkIfDone (check) ->\n                        # console.log(JSON.stringify({check,expected,argument}))\n                        if JSON.stringify(check) is JSON.stringify(expected)\n                            template.deactivate()\n                            done()\n                    template.activate()\n                    template.watchValue(\n                        (value) ->\n                            checkIfDone(value)\n                            ion.observe(\n                                value\n                                (changes) ->\n                                    checkIfDone(value)\n                            )\n                    )\n                    ion.patch(argument, patch)\n                    # console.log('just patched')\n                    # console.log(JSON.stringify({expected,argument}))\n                    ion.checkForChanges()\n"]}