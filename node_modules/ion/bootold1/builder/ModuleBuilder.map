{"version":3,"sources":["ModuleBuilder.ion"],"names":["global","window","ion","np","File","Directory","builder","utility","createDebugScript",{"type":"Identifier","name":"createDebugScript","loc":{"start":{"line":12,"column":4,"fixed":true,"source":"ion/builder/ModuleBuilder.ion"},"end":{"line":12,"column":21,"fixed":true,"source":"ion/builder/ModuleBuilder.ion"}}},"manifest","moduleName","path","scripts","files","file","JSON","stringify","compilers","compile","compileCoffeeScript","compilePegjs","shimJavascript","compileIon","compileWithSourceMap","compileIonWithSourceMap"],"mappings":"aAAA;AAAA,IAAGA,MAAA,CAAOC,MAAV,EACA;AAAA,IAAI,OAAJ;AAAA,CADA;AAGA,IACIC,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,EAAA,G,OAAK,CAAO,MAAP,CAFT,EAGIC,IAAA,G,OAAO,CAAO,QAAP,CAHX,EAIIC,SAAA,G,OAAY,CAAO,aAAP,CAJhB,EAKIC,OAAA,G,OAAU,CAAO,IAAP,CALd,EAMIC,OAAA,G,OAAU,CAAO,WAAP,CANd,EAQIC,iBAAA,GAAoBC,UAACC,QAADD,EAAWE,UAAXF,EAAuBG,IAAvBH,EACxB;AAAA,QAAQ,IAAII,OAAA,GAAU,EAAd,CAAR;AAAA,Q;wBACwBH,QAAA,CAASI,K;sDACjC;AAAA,gB,IADgBC,I,aAChB;AAAA,gBAFYF,O,WAEOD,I,GAAQD,U,aAAmBI,I,EAA9C;AAAA,a;SAFA;AAAA,QAGQ,O,wJAKSC,IAAA,CAAKC,SAAL,CAAeJ,OAAf,C,OALT,CAHR;AAAA,KATA,EAmBIK,SAAA,GAAW;AAAA,Q,SACP,EAAU,EACNC,OAAA,EAASb,OAAA,CAAQc,mBADX,EADH;AAAA,Q,QAGP,EAAS,EACLD,OAAA,EAASb,OAAA,CAAQe,YADZ,EAHF;AAAA,Q,KAKP,EAAM,EACFF,OAAA,EAASb,OAAA,CAAQgB,cADf,EALC;AAAA,Q,MAOP,EAAO;AAAA,YACHH,OAAA,EAASb,OAAA,CAAQiB,UADd;AAAA,YAEHC,oBAAA,EAAsBlB,OAAA,CAAQmB,uBAF3B;AAAA,SAPA;AAAA,KAnBf,CAHA","sourcesContent":["if global.window\n    return\n\nconst\n    ion = import '../'\n    np = import 'path'\n    File = import './File'\n    Directory = import './Directory'\n    builder = import './'\n    utility = import './utility'\n\n    createDebugScript = (manifest, moduleName, path) ->\n        let scripts = []\n            for file in manifest.files\n                \"{{path}}{{moduleName}}/lib/{{file}}\"\n        return \"\"\n            (function(files){\n                for (var i = 0; i < files.length; i++) {\n                    document.writeln(\"<script src='\" + files[i] + \"'></script>\")\n                }\n            })({{JSON.stringify(scripts)}});\n\n    compilers =\n        \".coffee\":\n            compile: builder.compileCoffeeScript\n        \".pegjs\":\n            compile: builder.compilePegjs\n        \".js\":\n            compile: builder.shimJavascript\n        \".ion\":\n            compile: builder.compileIon\n            compileWithSourceMap: builder.compileIonWithSourceMap\n\nexport template (packagePatch) ->\n    let packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})\n    let input = new Directory(packageJson.directories.src ? 'src')\n    let output = new Directory(packageJson.directories.lib ? 'lib')\n    let moduleName = packageJson.name ? ''\n\n    # build all source files with a single search, and also build a list of their output names\n    let extensions = Object.keys(compilers)\n    let outputFiles = {}\n        for path, source of input.search(extensions, packageJson.build.exclude)\n            if not source.isDirectory\n                let compiler = compilers[source.getExtension()]\n                let targetPath = builder.changeExtension(path, '.js')\n                # let outputFile = output.getFile(targetPath)\n                # if source.modified > outputFile.modified\n                if compiler.compileWithSourceMap?\n                    let mapPath = builder.changeExtension(path, '.map')\n                    let mapName = mapPath.split(/[\\/\\\\]/g).slice(-1)[0]\n                    let [code,map] = compiler.compileWithSourceMap(source, packageJson)\n                    void output.write(targetPath, code + \"\\n//# sourceMappingURL=./\" + mapName)\n                    void output.write(mapPath, map)\n                else\n                    void output.write(targetPath, compiler.compile(source, packageJson))\n                [targetPath]: output.getFile(targetPath)\n                # also add the index for this file, since it may be generated in next section\n                let indexPath = targetPath.slice(0, targetPath.lastIndexOf('/') + 1) + \"index.js\"\n                [indexPath]: output.getFile(indexPath)\n        else\n            void output.delete(targetPath)\n            void output.delete(mapPath)\n            delete [targetPath]\n\n    # build a default index file for each output directory (including root)\n    let potentialIndexDirectories = input.search(null, extensions.concat(packageJson.build.exclude))\n        [\".\"]: input.getFile('.')\n    for path, file of potentialIndexDirectories\n        if file.isDirectory\n            # see if there is an input.js or input.ion file\n            let isInputFile = input.getFile(path + \"/index.js\").exists or input.getFile(path + \"/index.ion\").exists or input.getFile(path + \"/index.coffee\").exists\n            if not isInputFile\n                # then create an output file\n                let indexDirectory = output.getDirectory(path)\n                let indexName = \"index.js\"\n                let indexFile = indexDirectory.getFile(indexName)\n                # get a list of all output files in that directory\n                let lines = {}\n                    for key, childFile of indexDirectory.search(null, null, {recursive:false})\n                        if key isnt indexName and (childFile.path.endsWith('.js') or childFile.isDirectory)\n                            let name = childFile.isDirectory ? key : key.substring(0, key.lastIndexOf('.js'))\n                            [key]: \"Object.defineProperty(exports, '{{name}}', {get:function(){ return require('./{{name}}') }, enumerable: true}) \"\n\n                let indexModuleId = np.join(moduleName, path, \"index\").replace(/\\\\/g, '/')\n                void indexDirectory.write(indexName, builder.addBrowserShim([value for key, value of lines].join('\\n'), indexModuleId))\n\n    # build a manifest file with require.js at the top\n    # ignore output _browser.js and node_modules\n\n    # output.search(\".js\", [/^_/, 'node_modules'].concat(Object.keys(packageJson.build.merge ? {})))\n    let top = [key for key of outputFiles if key.endsWith('require.js')]\n    let sortedFiles = top.concat([key for key of outputFiles if not builder.isPrivate(key) and top.indexOf(key) < 0])\n    let manifestFileName = \"manifest.json\"\n    let manifestFile = output.getFile(manifestFileName)\n    let manifest =\n        modified: Math.max.apply(null, [file.modified for path, file of outputFiles])\n        files: [builder.normalizePath(path) for path in sortedFiles]\n    output.write(manifestFileName, JSON.stringify(manifest, null, '  ', sortedFiles))\n    # also write the debug script\n    output.write('_debug.js', createDebugScript(manifest, moduleName, \"/bower_components/\"))\n\n    # # build merged file, just so we can test locally with file:// protocol\n    # if packageJson.build.merge?\n    #     for mergeFile, options of packageJson.build.merge\n    #         let mergedArray = []\n    #             for index, name of sortedFiles\n    #                 let content = outputFiles[name].read?()\n    #                 if content? and not content.startsWith(\"#\") and not utility.isMatch(name, options.exclude, false)\n    #                     # remove source mapping comments.\n    #                     [index]: content\n    #                 else\n    #                     [index]: \"\"\n    #             else\n    #                 [index]: \"\"\n\n    #         let merged = mergedArray.join('\\n')\n    #         if options.compress\n    #             let minified = require('uglify-js').minify(merged, {fromString:true})\n    #             output.write(mergeFile, minified.code)\n    #         else\n    #             output.write(mergeFile, merged)\n\n    # # copy the package.json to the lib directory\n    # if packageJson.build.package isnt false\n    #     output.write('package.json', JSON.stringify(ion.patch(ion.clone(packageJson), {main:undefined}), null, '    '))\n    #     # # also copy the bower.json file if present\n    #     # let bower = new File('bower.json')\n    #     # if bower.exists\n    #     #     output.write('bower.json', bower.read())\n\n    # builder.test\n    if packageJson.build.test isnt false\n        builder.runTests(manifestFile, manifestFile.modified)\n"]}