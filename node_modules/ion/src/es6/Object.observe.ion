
const clone = (object, properties) ->
    if properties?
        return {}
            for key of properties
                [key]: object[key]
    else
        return {}
            for key, value of object
                [key]: value

export const createShim = ->
    # multiple callbacks on same object.
    let map = new Map()

    let observe = (object, callback, property) ->
        # console.log('+observe', property)
        let meta = map.get(object)
        if not meta?
            meta =
                object: object
                properties: {}
                all: 0
                clone: clone(object, property ? {[property]:0} : null)
                callbacks: []
            map.set(object, meta)
        if property?
            meta.properties[property] ?= 0
            meta.properties[property]++
        else
            meta.all++
        meta.callbacks.push(callback)
    let unobserve = (object, callback, property) ->
        # console.log('-unobserve', object, callback)
        let meta = map.get(object)
        if meta?
            meta.callbacks.remove(callback)
            if meta.callbacks.length is 0
                # remove no longer observed objects
                map.delete(object)
            if property?
                meta.properties[property]--
                if meta.properties[property] is 0
                    delete meta.properties[property]
            else
                meta.all--

    let getChanges = (oldValue, newValue, properties) ->
        let changes = null
        let change = (type, name, oldValue, object) ->
            changes ?= []
            changes.push({type,name,oldValue,object})
            # console.log('change', type, name)
        let checkForChange = (property) ->
            # we only check add/delete on plain old javascript objects
            if newValue.constructor is Object
                if oldValue.hasOwnProperty(name)
                    let oldPropertyValue = oldValue[name]
                    if not newValue.hasOwnProperty(name)
                        if oldPropertyValue isnt undefined
                            change("delete", name, oldPropertyValue, newValue)
                    else
                        let newPropertyValue = newValue[name]
                        # must use Object.is because NaN != NaN
                        if not Object.is(newPropertyValue, oldPropertyValue)
                            change("update", name, oldPropertyValue, newValue)
                else if newValue.hasOwnProperty(name)
                    change("add", name, undefined, newValue)
            else
                # for everything else, we only check current property values
                let oldPropertyValue = oldValue[name]
                let newPropertyValue = newValue[name]
                # must use Object.is because NaN != NaN
                if not Object.is(newPropertyValue, oldPropertyValue)
                    change("update", name, oldPropertyValue, newValue)

        if properties?
            for name of properties
                checkForChange(name)
        else
            for name of oldValue
                checkForChange(name)
            for name of newValue
                if not oldValue.hasOwnProperty(name)
                    checkForChange(name)
        return changes
    observe.checkForChanges = do ->
        let timeout = null
        let check = ->
            let maxCycles = 10
            # we have to run multiple cycles in case callbacks cause further change propagation
            for let i = 0; i < maxCycles; i++
                let totalChanges = 0
                let pendingChanges = []
                # traverse all objects and find changes
                map.forEach(
                    (meta, key) ->
                        let properties = meta.all > 0 ? null : meta.properties
                        let changes = getChanges(meta.clone, meta.object, properties)
                        if changes?
                            totalChanges++
                            meta.clone = clone(meta.object, properties)
                            # callbacks must be deferred until after ALL changes have been found
                            pendingChanges.push([changes, meta.callbacks.slice(0), meta])
                )
                if totalChanges is 0
                    timeout = null
                    return
                for [changes, callbacks] in pendingChanges
                    # console.log(i, changes)
                    for callback in callbacks
                        callback(changes)

            # we have hit max cycles, indicates a circular dependency error
            throw new Error("Circular Object.observe dependency")

        return (forceImmediate) ->
            if forceImmediate
                check()
            else
                timeout ?= setTimeout(check, 10)

    return {observe,unobserve}

export const test = ->
    let {observe,unobserve} = createShim()
    let object =
        a: 1
        b:
            c: 2
            d: 3
    let changes
    let handler = (c) ->
        changes = c
    observe(object, handler)
    object.a = 2
    delete object.b
    object.c = 5
    observe.checkForChanges(true)
    assert JSON.stringify(changes) is JSON.stringify([{"type":"update","name":"a","oldValue":1,"object":{"a":2,"c":5}},{"type":"delete","name":"b","oldValue":{"c":2,"d":3},"object":{"a":2,"c":5}},{"type":"add","name":"c","object":{"a":2,"c":5}}])
    unobserve(object, handler)

if not Object.observe? and global.Map?
    console.warn('Shimming Object.observe')
    for key, value of createShim()
        Object[key] = value
