const
    ion = import '../'
    DynamicExpression = import './DynamicExpression'

module.exports = class ConditionalExpression extends DynamicExpression
    # [@test, @consequent, @alternate]
    properties:
        activate: ->
            super
            @testExpression ?= @context.createRuntime(@test)
            @unobserveTest = @testExpression.observe(
                @testObserver ?= (value) =>
                    if not @hasOwnProperty('testValue') or Boolean(value) isnt Boolean(@testValue)
                        @testValue = value
                        @unobserveExpression?()
                        if value
                            @unobserveExpression = @context.createRuntime(@consequent).observe(
                                @consequentObserver ?= (value) =>
                                    if @testValue
                                        @setValue(value)
                            )
                        else
                            @unobserveExpression = @context.createRuntime(@alternate).observe(
                                @alternateObserver ?= (value) =>
                                    if not @testValue
                                        @setValue(value)
                            )
            )
        deactivate: ->
            super
            @unobserveTest()
            @unobserveExpression?()
