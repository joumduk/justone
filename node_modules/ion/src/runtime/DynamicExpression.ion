const ion = import '../'

export class DynamicExpression extends import './Expression'
    properties:
        isActive: false
        activate: ->
            # called when we have watchers
            @isActive = true
        deactivate: ->
            # called when we no longer have watchers
            @isActive = false
        observe: (observer) ->
            let watchers = @_watchers ?= []
            if watchers.length is 0
                @activate()
            watchers.push(observer)
            # notify observer immediately if we have a value
            if @hasValue()
                let value = @getValue()
                @_notifyWatcher(observer, value)
            return =>
                @_watchers.remove(observer)
                # this must happen AFTER we notify the observer,
                # otherwise it changes the value and the observer may not be notified.
                if @_watchers.length is 0
                    @deactivate()
        _notifyWatcher: (observer, value) -> observer.call(@, value)
        notify: ->
            if @_watchers?
                let value = @getValue()
                for observer in @_watchers
                    @_notifyWatcher(observer, value)
            return
        hasValue: -> @hasOwnProperty('value')
        getValue: -> @value
        setValue: (value) ->
            if value isnt @value or not @hasValue()
                @value = value
                @notify()
            return
    test: ->
        const d = new DynamicExpression()
        if d.getValue() isnt undefined
            throw "d.getValue() != undefined"
        let total = 10
        const observer = (value) ->
            if value isnt undefined
                total += value
        let unobserve = d.observe(observer)
        assert total is 10
        d.setValue(10)
        assert d.getValue() is 10
        assert total is 20
        d.setValue(20)
        assert total is 40
        unobserve()
        assert total is 40
        d.setValue(50)
        assert total is 40
