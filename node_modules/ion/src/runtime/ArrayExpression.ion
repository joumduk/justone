const
    ion = import '../'
    DynamicExpression = import './DynamicExpression'

export class ArrayExpression extends DynamicExpression
    constructor: ->
        super
        if not @elements?
            throw new Error("elements is required")
        if not @context?
            throw new Error("context is required")
    properties:
        observeElements: false
        notifyIfActive: ->
            if @isActive
                @notify()
        setArgumentValue: (key, expression, value) ->
            if @argumentValues[key] isnt value
                @unobserveExpressionValues[key]?()
                @argumentValues[key] = value
                if @observeElements
                    if value?
                        @itemObserver ?= =>
                            @notifyIfActive()
                        let priority = @context.depth
                        @unobserveExpressionValues[key] = expression.deep ? ion.patch.watch(value, @itemObserver) : ion.observe(value, @itemObserver, {priority})
                @notifyIfActive()
        activate: ->
            @expressions = [@context.createRuntime(item) for item in @elements]
            @argumentValues = []
            @unobserveExpressionValues = []
            @unobserveExpressions = []
            for expression, key in @expressions
                @unobserveExpressions.push(expression.observe(@setArgumentValue.bind(@, key, expression)))
            super
            @setValue(@argumentValues)
        deactivate: ->
            for expression, key in @expressions
                @unobserveExpressionValues[key]?()
            for unobserve in @unobserveExpressions
                unobserve()
            super
    test: ->
        const Context = import './Context'
        let e = new ArrayExpression(
            context: new Context()
            elements: []
                {type:'Literal', value: 1}
                {type:'Literal', value: 2}
        )
        let result = undefined
        const watcher(value) ->
            result = value
        let unobserve = e.observe(watcher)
        assert JSON.stringify(result) is "[1,2]"
        unobserve()
