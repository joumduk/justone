
const
    ion = import '../'
    makePrettyError = (e, source, id) ->
        if typeof e.line is 'number' and typeof e.column is 'number' and e.line > 0 and e.column > 0
            let line = source.split('\n')[e.line - 1]
            let caret = '^'
            for let i = 1; i < e.column; i++
                caret = ' ' + caret
            let newMessage = "{{id ? '(anonymous)'}}:{{e.line}}:{{e.column}}: {{e.message}}\n{{line}}\n{{caret}}"
            e.originalMessage = e.message
            e.message = newMessage
            e.stack = newMessage # + '\n' + e.stack

export const
    parse = (content, options = {}) ->
        options.generate = false
        return compile(content, options)

    compile = (content, options = {}) ->
        return compileWithSourceMap(content, options)[0]

    compileWithSourceMap = (content, options = {}) ->
        let header = ""
        if content.startsWith("#!")
            header = content.split(/\r|\n/)[0] + "\n"

        options.loc ?= true
        options.target ?= 'es5'
        const
            preprocessor = import './preprocessor'
            parser = import './parser'
            postprocessor = import './postprocessor'
            escodegen = import './escodegen'
        let
            sourceMapping = {}
            result = preprocessor.preprocess(content, sourceMapping)

            sourceMap = null
            preprocessed = result
            sourceLocationsFixed = false
            dump = (description) ->
                if options.debug
                    console.log('-' + description + '--------------------------------------')
                    console.log(typeof result is 'string' ? result : JSON.stringify(result, null, '  '))
                    console.log('---------------------------------------------------')
        try
            dump('Preprocessed')
            result = parser.parse(result, options)
            dump('Parsed')
            result = preprocessor.fixSourceLocations(result, sourceMapping, options.source)
            sourceLocationsFixed = true
            if options.postprocess isnt false
                result = postprocessor.postprocess(result, options)
                if options?.generate isnt false
                    let generateOptions =
                        sourceMapWithCode: true
                        if not global.window?
                            sourceMap: options.sourceMap ? options.source
                        sourceContent: content
                        verbatim: 'verbatim'
                    let output = escodegen.generate(result, generateOptions)
                    result = output.code
                    dump('Generated')
                    sourceMap = output.map?.toString()
        catch e
            if not sourceLocationsFixed
                preprocessor.fixSourceLocation(e, sourceMapping)
            # console.log('-Preprocessed--------------------------------------------')
            # console.log(preprocessed)
            makePrettyError(e, content, options.id)
            throw e
        return [header + result,sourceMap]
