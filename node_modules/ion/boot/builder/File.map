{"version":3,"sources":["File.ion"],"names":["global","Window","ion","fs","np","utility","File","constructor","path","Error","Object","defineProperties","value","enumerable","writable","modified","getModified","makeReactive","watcher","existsSync","watch","checkForChanges","close","properties","isFile","get",{"type":"Identifier","name":"get","loc":{"start":{"line":49,"column":12,"fixed":true,"source":"ion/builder/File.ion"},"end":{"line":49,"column":15,"fixed":true,"source":"ion/builder/File.ion"}}},"isDirectory","statSync","directoryName","dirname","exists","copyFrom","file","write","read","console","log","normalize","_lastModified","_content","encoding","content","getExtension","index","lastIndexOf","substring","delete","toString","valueOf"],"mappings":"aAAA;AACA,IAAGA,MAAA,CAAOC,MAAV,EACA;AAAA,IAAI,OAAJ;AAAA,CAFA;AAIA,IACIC,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,EAAA,G,OAAK,CAAO,IAAP,CAFT,EAGIC,EAAA,G,OAAK,CAAO,MAAP,CAHT,EAIIC,OAAA,G,OAAU,CAAO,WAAP,CAJd,CAJA;IAUaC,I;;QACTC,WAAA,EAAa,SADJD,IACI,CAACE,IAAD,EACjB;AAAA,YAAQ,I,CAAGA,I,WAAAA,IAAA,CAAMD,W,UAAN,KAAqBD,IAAxB,EACR;AAAA,gBAAY,OAAOE,IAAP,CAAZ;AAAA,aADA;AAAA,YAEQ,IAAG,KAACD,WAAD,KAAkBD,IAArB,EACR;AAAA,gBAAY,OAAO,IAAIA,IAAJ,CAASE,IAAT,CAAP,CAAZ;AAAA,aAHA;AAAA,YAIQ,IAAG,OAAOA,IAAP,KAAiB,QAApB,EACR;AAAA,gBAAY,MAAM,IAAIC,KAAJ,C,yBAAA,CAAN,CAAZ;AAAA,aALA;AAAA,YAMQC,MAAA,CAAOC,gBAAP,CACI,IADJ,EAEI;AAAA,gBACIH,IAAA,EAAK;AAAA,oBACDI,KAAA,EAAOJ,IADN;AAAA,oBAEDK,UAAA,EAAY,IAFX;AAAA,oBAGDC,QAAA,EAAU,KAHT;AAAA,iBADT;AAAA,aAFJ,EANR;AAAA,YAeQ,KAACC,QAAD,GAAYV,OAAA,CAAQW,WAAR,CAAoBR,IAApB,CAAZ,CAfR;AAAA,YAiBQN,GAAA,CAAIe,YAAJ,CACI,IADJ,E,SAEI,YACZ;AAAA,gBAAgB,IAAIC,OAAJ,CAAhB;AAAA,gBACgB,IAAGf,EAAA,CAAGgB,UAAH,CAAc,KAACX,IAAf,CAAH,EAChB;AAAA,oBAAoBU,OAAA,GAAUf,EAAA,CAAGiB,KAAH,CACN,KAACZ,IADK,E,SAEN,YACxB;AAAA,wBAA4B,IAAIO,QAAA,GAAWV,OAAA,CAAQW,WAAR,CAAoB,KAACR,IAArB,CAAf,CAA5B;AAAA,wBAC4B,KAACO,QAAD,GAAYA,QAAZ,CAD5B;AAAA,wBAE4B,IAAGA,QAAA,KAAc,KAACA,QAAlB,EAG5B;AAAA,4BAAgCb,GAAA,CAAImB,eAAJ,GAAhC;AAAA,yBALA;AAAA,qB,OAH8B,CAAV,CAApB;AAAA,iBAFA;AAAA,gBAYgB,OAAO,Y;2BAAGH,O,WAAAA,OAAA,CAASI,KAAT,E;iBAAV,CAZhB;AAAA,a,OAHQ,EAjBR;AAAA,S;QAkCIC,UAAA,EAAW;AAAA,YACPC,MAAA,EAAO;AAAA,gBACHC,GAAA,EAAKC,Y;2BAAG,CAAI,KAACC,W;iBADV;AAAA,aADA;AAAA,YAGPA,WAAA,EAAY;AAAA,gBACRF,GAAA,EAAKC,Y;2BAAGvB,EAAA,CAAGyB,QAAH,CAAY,KAACpB,IAAb,EAAmBmB,WAAnB,E;iBADA;AAAA,aAHL;AAAA,YAKPE,aAAA,EAAc;AAAA,gBACVJ,GAAA,EAAKC,Y;2BAAGtB,EAAA,CAAG0B,OAAH,CAAW,KAACtB,IAAZ,C;iBADE;AAAA,aALP;AAAA,YAOPuB,MAAA,EAAO;AAAA,gBACHN,GAAA,EAAKC,Y;2BAAGvB,EAAA,CAAGgB,UAAH,CAAc,KAACX,IAAf,C;iBADL;AAAA,aAPA;AAAA,YASPwB,QAAA,EAAUN,UAACO,IAADP,EAClB;AAAA,gBAAYO,IAAA,GAAO3B,IAAA,CAAK2B,IAAL,CAAP,CAAZ;AAAA,gBACY,KAACC,KAAD,CAAOD,IAAA,CAAKE,IAAL,CAAU,IAAV,CAAP,EAAwB,IAAxB,EADZ;AAAA,gBAEYC,OAAA,CAAQC,GAAR,C,aAAuBjC,EAAA,CAAGkC,SAAH,CAAa,KAAC9B,IAAd,CAAvB,EAFZ;AAAA,aAVe;AAAA,YAaP2B,IAAA,EAAS,YAGjB;AAAA,gBAAY,IAAII,aAAA,GAAgB,EAApB,CAAZ;AAAA,gBACY,IAAIC,QAAA,GAAW,EAAf,CADZ;AAAA,gBAEY,OAAO,UAACC,QAAD,EACnB;AAAA,oBAAgB,IAAGtC,EAAA,CAAGgB,UAAH,CAAc,KAACX,IAAf,CAAH,EAEhB;AAAA,wBAAoB,IAAIO,QAAA,GAAWV,OAAA,CAAQW,WAAR,CAAoB,KAACR,IAArB,CAAf,CAApB;AAAA,wBACoB,IAAIkC,OAAJ,CADpB;AAAA,wBAEoB,IAAG3B,QAAA,KAAYwB,aAAA,CAAc,KAAC/B,IAAf,CAAf,EACpB;AAAA,4BAAwBkC,OAAA,GAAUF,QAAA,CAAS,KAAChC,IAAV,CAAV,CAAxB;AAAA,yBADoB,MAGpB;AAAA,4BAAwBgC,QAAA,CAAS,KAAChC,IAAV,IAAkBkC,OAAA,GAAUrC,OAAA,CAAQ8B,IAAR,CAAa,KAAC3B,IAAd,EAAoBiC,QAApB,CAA5B,CAAxB;AAAA,4BACwBF,aAAA,CAAc,KAAC/B,IAAf,IAAuBO,QAAvB,CADxB;AAAA,yBALA;AAAA,wBAOoB,OAAO2B,OAAP,CAPpB;AAAA,qBAFgB,MAWhB;AAAA,wBAAoB,OAAO,IAAP,CAApB;AAAA,qBAXA;AAAA,iBADY,CAFZ;AAAA,aAHc,EAbC;AAAA,YA+BPC,YAAA,EAAcjB,YACtB;AAAA,gBAAY,IAAIkB,KAAA,GAAQ,KAACpC,IAAD,CAAMqC,WAAN,CAAkB,GAAlB,CAAZ,CAAZ;AAAA,gBACY,OAAOD,KAAA,GAAQ,CAAR,G,EAAA,GAAiB,KAACpC,IAAD,CAAMsC,SAAN,CAAgBF,KAAhB,CAAxB,CADZ;AAAA,aAhCe;AAAA,YAkCPV,KAAA,EAAOR,UAACgB,OAADhB,EAAUe,QAAVf,EACf;AAAA,gBAAY,IAAGgB,O,QAAA,IAAaA,OAAA,KAAa,KAACP,IAAD,CAAMM,QAAN,CAA7B,EACZ;AAAA,oBAAgBpC,OAAA,CAAQ6B,KAAR,CAAc,KAAC1B,IAAf,EAAqBkC,OAArB,EAA8BD,QAA9B,EAAhB;AAAA,iBADA;AAAA,aAnCe;AAAA,YAqCPM,MAAA,EAAQrB,Y;uBAAGrB,OAAA,CAAQ6B,KAAR,CAAc,KAAC1B,IAAf,EAAqB,IAArB,C;aArCJ;AAAA,YAsCPwC,QAAA,EAAUtB,Y;uBAAG,KAAClB,I;aAtCP;AAAA,YAuCPyC,OAAA,EAASvB,Y;uBAAG,KAAClB,I;aAvCN;AAAA,S;OA9Cf;2BAUaF,I","sourcesContent":["\nif global.Window\n    return\n\nconst\n    ion = import '../'\n    fs = import 'fs'\n    np = import 'path'\n    utility = import './utility'\n\nexport class File\n    constructor: (path) ->\n        if path?.constructor is File\n            return path\n        if @constructor isnt File\n            return new File(path)\n        if typeof path isnt 'string'\n            throw new Error(\"path string is required\")\n        Object.defineProperties(\n            @\n            {}\n                path:\n                    value: path\n                    enumerable: true\n                    writable: false\n        )\n        # set modified immediately\n        @modified = utility.getModified(path)\n        # make us reactive to observers.  Specifically we will just update our modified value as needed.\n        ion.makeReactive(\n            @\n            =>\n                let watcher\n                if fs.existsSync(@path)\n                    watcher = fs.watch(\n                        @path\n                        =>\n                            let modified = utility.getModified(@path)\n                            @modified = modified\n                            if modified isnt @modified\n                                # explicit check is only because current\n                                # nodejs versions don't have Object.observe yet.\n                                ion.checkForChanges()\n                    )\n                return -> watcher?.close()\n        )\n    properties:\n        isFile:\n            get: -> not @isDirectory\n        isDirectory:\n            get: -> fs.statSync(@path).isDirectory()\n        directoryName:\n            get: -> np.dirname(@path)\n        exists:\n            get: -> fs.existsSync(@path)\n        copyFrom: (file) ->\n            file = File(file)\n            @write(file.read(null), null)\n            console.log(\"Copied: {{np.normalize(@path)}}\")\n        read: do ->\n            # we store changes here, not in File, otherwise\n            # reading will cause file to change which causes\n            let _lastModified = {}\n            let _content = {}            \n            return (encoding) ->\n                if fs.existsSync(@path)\n                    # cache file content as long as the file remains unmodified\n                    let modified = utility.getModified(@path)\n                    let content\n                    if modified is _lastModified[@path]\n                        content = _content[@path]\n                    else\n                        _content[@path] = content = utility.read(@path, encoding)\n                        _lastModified[@path] = modified\n                    return content\n                else\n                    return null\n        getExtension: ->\n            let index = @path.lastIndexOf('.')\n            return index < 0 ? \"\" : @path.substring(index)\n        write: (content, encoding) ->\n            if content? and content isnt @read(encoding)\n                utility.write(@path, content, encoding)\n        delete: -> utility.write(@path, null)\n        toString: -> @path\n        valueOf: -> @path\n"]}