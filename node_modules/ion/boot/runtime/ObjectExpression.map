{"version":3,"sources":["ObjectExpression.ion"],"names":["ion","DynamicExpression","ObjectExpression","properties","setLeftValue",{"type":"Identifier","name":"setLeftValue","loc":{"start":{"line":8,"column":8,"fixed":true,"source":"ion/runtime/ObjectExpression.ion"},"end":{"line":8,"column":20,"fixed":true,"source":"ion/runtime/ObjectExpression.ion"}}},"value","activate","typeExpression","context","createRuntime","objectType","unobserve","observe","typeWatcher","statements","deactivate","newContext","type","body","setValue"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,iBAAA,G,OAAoB,CAAO,qBAAP,CAFxB;IAIaC,gB;;QACTC,UAAA,EAAW;AAAA,YAEPC,YAAA,EAAcC,UAACC,KAADD,EACtB;AAAA,gBAAY,KAACC,KAAD,GAASA,KAAT,CAAZ;AAAA,aAHe;AAAA,YAIPC,QAAA,EAAUF,YAClB;AAAA,gB,iCADQE,Q,uBACI,CAAZ;AAAA,gBAGY,KAACC,cAAD,QAACA,c,WAAD,KAACA,c,GAAkB,KAACC,OAAD,CAASC,aAAT,CAAuB,KAACC,U,WAAD,KAACA,U,GAAa,IAArC,CAAnB,CAHZ;AAAA,gBAIY,KAACC,SAAD,GAAa,KAACJ,cAAD,CAAgBK,OAAhB,CACT,KAACC,WAAD,QAACA,W,WAAD,KAACA,W,YAAe,UAACR,KAAD,EAChC;AAAA,oBAAoB,IAAG,CAAI,KAACA,KAAL,IAAcA,K,QAAjB,EACpB;AAAA,wBAAwB,KAACS,U,WAAD,KAACA,UAAD,CAAaC,UAAb,E,SAAA,CAAxB;AAAA,wBACwB,KAACD,UAAD,GAAc,IAAd,CADxB;AAAA,wBAEwBT,KAAA,GAAAA,K,WAAAA,K,GAAS,EAAT,CAFxB;AAAA,qBADoB,MAMpB;AAAA,wBAAwBA,KAAA,GAAQ,KAACA,KAAT,CAAxB;AAAA,qBANA;AAAA,oBAQoB,IAAG,C,CAAI,KAACS,U,SAAR,EACpB;AAAA,wBAAwB,IAAIE,UAAA,GAAa,KAACR,OAAD,CAASQ,UAAT,CAAoBX,KAApB,CAAjB,CAAxB;AAAA,wBACwB,KAACS,UAAD,GAAcE,UAAA,CAAWP,aAAX,CAAyB;AAAA,4BAACQ,IAAA,EAAK,gBAAN;AAAA,4BAAwBC,IAAA,EAAK,KAAChB,UAA9B;AAAA,yBAAzB,CAAd,CADxB;AAAA,wBAEwB,KAACY,UAAD,CAAYR,QAAZ,GAFxB;AAAA,qBATA;AAAA,oBAaoB,KAACa,QAAD,CAAUd,KAAV,EAbpB;AAAA,iB,OAFyB,CAAb,CAJZ;AAAA,aALe;AAAA,YA0BPU,UAAA,EAAYX,YACpB;AAAA,gB,iCADQW,U,uBACI,CAAZ;AAAA,gBACY,KAACD,U,WAAD,KAACA,UAAD,CAAaC,UAAb,E,SAAA,CADZ;AAAA,gBAEY,KAACJ,SAAD,GAFZ;AAAA,aA3Be;AAAA,S;OADuBX,iB,EAJtC;2BAIaC,gB","sourcesContent":["const\n    ion = import '../'\n    DynamicExpression = import './DynamicExpression'\n\nexport class ObjectExpression extends DynamicExpression\n    properties:\n        # this is called by a PropertyExpression to let us know the current left hand value.\n        setLeftValue: (value) ->\n            @value = value\n        activate: ->\n            super\n            # its not really a type watcher any longer, that is historical\n            # its just watching for an instance            \n            @typeExpression ?= @context.createRuntime(@objectType ? null)\n            @unobserve = @typeExpression.observe(\n                @typeWatcher ?= (value) =>\n                    if not @value or value?\n                        @statements?.deactivate()\n                        @statements = null\n                        value ?= {}\n                    else\n                        # a default value could have been passed in\n                        value = @value\n\n                    if not @statements?\n                        let newContext = @context.newContext(value)\n                        @statements = newContext.createRuntime({type:'BlockStatement', body:@properties})\n                        @statements.activate()\n\n                    @setValue(value)\n            )\n        deactivate: ->\n            super\n            @statements?.deactivate()\n            @unobserve()\n"]}