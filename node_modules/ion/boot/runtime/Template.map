{"version":3,"sources":["Template.ion"],"names":["ion","BlockStatement","DynamicExpression","noop",{"type":"Identifier","name":"noop","loc":{"start":{"line":5,"column":4,"fixed":true,"source":"ion/runtime/Template.ion"},"end":{"line":5,"column":8,"fixed":true,"source":"ion/runtime/Template.ion"}}},"count","Template","constructor","context","returnExpression","properties","observe","watcher","isActive","activate","unobserve","deactivate","toString","id","name"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,cAAA,G,OAAiB,CAAO,kBAAP,CAFrB,EAGIC,iBAAA,G,OAAoB,CAAO,qBAAP,CAHxB,EAIIC,IAAA,GAAOC,Y;KAJX;AAMA,IAAIC,KAAA,GAAQ,CAAZ,CANA;IAQaC,Q;;QACTC,WAAA,EAAa,SADJD,QACI,GACjB;AAAA,Y,qCAAQ,CAAR;AAAA,YACQ,KAACE,OAAD,CAASC,gBAAT,GAA4B,IAAIP,iBAAJ,EAA5B,CADR;AAAA,S;QAEIQ,UAAA,EAAW;AAAA,YAEPC,OAAA,EAASP,UAACQ,OAADR,EACjB;AAAA,gB,IADkBQ,O;oBAAAA,O,GAAUT,I,CAC5B;AAAA,gBAAY,IAAG,CAAI,KAACU,QAAR,EACZ;AAAA,oBAAgB,KAACC,QAAD,GAAhB;AAAA,iBADA;AAAA,gBAEY,IAAIC,SAAA,GAAY,KAACP,OAAD,CAASC,gBAAT,CAA0BE,OAA1B,CAAkCC,OAAlC,CAAhB,CAFZ;AAAA,gBAGY,O,SAAO,YACnB;AAAA,oBAAgBG,SAAA,GAAhB;AAAA,oBACgB,IAAG,CAAI,KAACP,OAAD,CAASC,gBAAT,CAA0BI,QAAjC,EAChB;AAAA,wBAAoB,KAACG,UAAD,GAApB;AAAA,qBAFA;AAAA,iB,OADY,CAHZ;AAAA,aAHe;AAAA,YAUPF,QAAA,EAAUV,YAClB;AAAA,gB,yBADQU,Q,uBACI,CAAZ;AAAA,gBACYT,KAAA,GADZ;AAAA,aAXe;AAAA,YAePW,UAAA,EAAYZ,YACpB;AAAA,gB,yBADQY,U,uBACI,CAAZ;AAAA,gBACYX,KAAA,GADZ;AAAA,aAhBe;AAAA,YAoBPY,QAAA,EAAUb,Y;uBAAG,KAACc,E,QAAD,G,cAAmB,KAACA,EAAD,CAAIC,IAAvB,G;aApBN;AAAA,S;OAJelB,c,EAR9B;2BAQaK,Q","sourcesContent":["const\n    ion = import '../'\n    BlockStatement = import './BlockStatement'\n    DynamicExpression = import './DynamicExpression'\n    noop = ->\n\nlet count = 0\n\nexport class Template extends BlockStatement\n    constructor: ->\n        super\n        @context.returnExpression = new DynamicExpression()\n    properties:\n        # Template also implements Expression interface\n        observe: (watcher = noop) ->\n            if not @isActive\n                @activate()\n            let unobserve = @context.returnExpression.observe(watcher)\n            return =>\n                unobserve()\n                if not @context.returnExpression.isActive\n                    @deactivate()\n        activate: ->\n            super\n            count++\n            # if @id?\n            #     console.log('++ activate template ' + count + \", observers: \" + ion.observe.count)\n        deactivate: ->\n            super\n            count--\n            # if @id?\n            #     console.log('-- deactivate template ' + count + \", observers: \" + ion.observe.count)\n        toString: -> @id? ? \"Template {{@id.name}}\" : \"Template\"\n\n        # TODO: Always use new on templates that should be disposed???\n        # expressions what are called on templates are not being removed some how.  Figure it out.\n"]}