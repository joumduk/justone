{"version":3,"sources":["DynamicExpression.ion"],"names":["ion","DynamicExpression","properties","isActive","activate",{"type":"Identifier","name":"activate","loc":{"start":{"line":6,"column":8,"fixed":true,"source":"ion/runtime/DynamicExpression.ion"},"end":{"line":6,"column":16,"fixed":true,"source":"ion/runtime/DynamicExpression.ion"}}},"deactivate","observe","observer","watchers","_watchers","length","push","hasValue","value","getValue","_notifyWatcher","remove","call","notify","hasOwnProperty","setValue","test","d","total","unobserve"],"mappings":"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","sourcesContent":["const ion = import '../'\n\nexport class DynamicExpression extends import './Expression'\n    properties:\n        isActive: false\n        activate: ->\n            # called when we have watchers\n            @isActive = true\n        deactivate: ->\n            # called when we no longer have watchers\n            @isActive = false\n        observe: (observer) ->\n            let watchers = @_watchers ?= []\n            if watchers.length is 0\n                @activate()\n            watchers.push(observer)\n            # notify observer immediately if we have a value\n            if @hasValue()\n                let value = @getValue()\n                @_notifyWatcher(observer, value)\n            return =>\n                @_watchers.remove(observer)\n                # this must happen AFTER we notify the observer,\n                # otherwise it changes the value and the observer may not be notified.\n                if @_watchers.length is 0\n                    @deactivate()\n        _notifyWatcher: (observer, value) -> observer.call(@, value)\n        notify: ->\n            if @_watchers?\n                let value = @getValue()\n                for observer in @_watchers\n                    @_notifyWatcher(observer, value)\n            return\n        hasValue: -> @hasOwnProperty('value')\n        getValue: -> @value\n        setValue: (value) ->\n            if value isnt @value or not @hasValue()\n                @value = value\n                @notify()\n            return\n    test: ->\n        const d = new DynamicExpression()\n        if d.getValue() isnt undefined\n            throw \"d.getValue() != undefined\"\n        let total = 10\n        const observer = (value) ->\n            if value isnt undefined\n                total += value\n        let unobserve = d.observe(observer)\n        assert total is 10\n        d.setValue(10)\n        assert d.getValue() is 10\n        assert total is 20\n        d.setValue(20)\n        assert total is 40\n        unobserve()\n        assert total is 40\n        d.setValue(50)\n        assert total is 40\n"]}