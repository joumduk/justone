{"version":3,"sources":["ConditionalExpression.ion"],"names":["ion","DynamicExpression","ConditionalExpression","properties","activate",{"type":"Identifier","name":"activate","loc":{"start":{"line":8,"column":8,"fixed":true,"source":"ion/runtime/ConditionalExpression.ion"},"end":{"line":8,"column":16,"fixed":true,"source":"ion/runtime/ConditionalExpression.ion"}}},"testExpression","context","createRuntime","test","unobserveTest","observe","testObserver","value","hasOwnProperty","Boolean","testValue","unobserveExpression","consequent","consequentObserver","setValue","alternate","alternateObserver","deactivate","module","exports"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,iBAAA,G,OAAoB,CAAO,qBAAP,CAFxB;IAIuBC,qB;;QAEnBC,UAAA,EAAW;AAAA,YACPC,QAAA,EAAUC,YAClB;AAAA,gB,sCADQD,Q,uBACI,CAAZ;AAAA,gBACY,KAACE,cAAD,QAACA,c,WAAD,KAACA,c,GAAkB,KAACC,OAAD,CAASC,aAAT,CAAuB,KAACC,IAAxB,CAAnB,CADZ;AAAA,gBAEY,KAACC,aAAD,GAAiB,KAACJ,cAAD,CAAgBK,OAAhB,CACb,KAACC,YAAD,QAACA,Y,WAAD,KAACA,Y,YAAgB,UAACC,KAAD,EACjC;AAAA,oBAAoB,IAAG,CAAI,KAACC,cAAD,CAAgB,WAAhB,CAAJ,IAAoCC,OAAA,CAAQF,KAAR,MAAoBE,OAAA,CAAQ,KAACC,SAAT,CAA3D,EACpB;AAAA,wBAAwB,KAACA,SAAD,GAAaH,KAAb,CAAxB;AAAA,wBACwB,KAACI,mB,WAAD,KAACA,mBAAD,E,SAAA,CADxB;AAAA,wBAEwB,IAAGJ,KAAH,EACxB;AAAA,4BAA4B,KAACI,mBAAD,GAAuB,KAACV,OAAD,CAASC,aAAT,CAAuB,KAACU,UAAxB,EAAoCP,OAApC,CACnB,KAACQ,kBAAD,QAACA,kB,WAAD,KAACA,kB,YAAsB,UAACN,KAAD,EACvD;AAAA,gCAAoC,IAAG,KAACG,SAAJ,EACpC;AAAA,oCAAwC,KAACI,QAAD,CAAUP,KAAV,EAAxC;AAAA,iCADA;AAAA,6B,OAFmD,CAAvB,CAA5B;AAAA,yBADwB,MAOxB;AAAA,4BAA4B,KAACI,mBAAD,GAAuB,KAACV,OAAD,CAASC,aAAT,CAAuB,KAACa,SAAxB,EAAmCV,OAAnC,CACnB,KAACW,iBAAD,QAACA,iB,WAAD,KAACA,iB,YAAqB,UAACT,KAAD,EACtD;AAAA,gCAAoC,IAAG,CAAI,KAACG,SAAR,EACpC;AAAA,oCAAwC,KAACI,QAAD,CAAUP,KAAV,EAAxC;AAAA,iCADA;AAAA,6B,OAFmD,CAAvB,CAA5B;AAAA,yBATA;AAAA,qBADA;AAAA,iB,OAF6B,CAAjB,CAFZ;AAAA,aAFe;AAAA,YAsBPU,UAAA,EAAYlB,YACpB;AAAA,gB,sCADQkB,U,uBACI,CAAZ;AAAA,gBACY,KAACb,aAAD,GADZ;AAAA,gBAEY,KAACO,mB,WAAD,KAACA,mBAAD,E,SAAA,CAFZ;AAAA,aAvBe;AAAA,S;OAFsChB,iB,EAJrD;AAIAuB,MAAA,CAAOC,OAAP,GAAuBvB,qBAAvB","sourcesContent":["const\n    ion = import '../'\n    DynamicExpression = import './DynamicExpression'\n\nmodule.exports = class ConditionalExpression extends DynamicExpression\n    # [@test, @consequent, @alternate]\n    properties:\n        activate: ->\n            super\n            @testExpression ?= @context.createRuntime(@test)\n            @unobserveTest = @testExpression.observe(\n                @testObserver ?= (value) =>\n                    if not @hasOwnProperty('testValue') or Boolean(value) isnt Boolean(@testValue)\n                        @testValue = value\n                        @unobserveExpression?()\n                        if value\n                            @unobserveExpression = @context.createRuntime(@consequent).observe(\n                                @consequentObserver ?= (value) =>\n                                    if @testValue\n                                        @setValue(value)\n                            )\n                        else\n                            @unobserveExpression = @context.createRuntime(@alternate).observe(\n                                @alternateObserver ?= (value) =>\n                                    if not @testValue\n                                        @setValue(value)\n                            )\n            )\n        deactivate: ->\n            super\n            @unobserveTest()\n            @unobserveExpression?()\n"]}