{"version":3,"sources":["Map.ion"],"names":["ion","uniqueCounter","idName","getId",{"type":"Identifier","name":"getId","loc":{"start":{"line":8,"column":6,"fixed":true,"source":"ion/es6/Map.ion"},"end":{"line":8,"column":11,"fixed":true,"source":"ion/es6/Map.ion"}}},"key","String","id","def","Object","getOwnPropertyDescriptor","value","defineProperty","MapShim","pairs","Error","lookup","keys","methods","get","set","hasOwnProperty","push","has","delete","remove","clear","forEach","callback","thisArg","call","global","Map","prototype","window","console","warn","test","map","length","mykey1"],"mappings":"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","sourcesContent":["const ion = null\n# don't depend on ion for this.\n\n# the uniqueCounter and getId have to be defined outside of the MapShim constructor.\n# otherwise some objects may end up with the same uniqueId if they are added to different Maps.\nlet uniqueCounter = 0\nconst idName = \"_Map_id_\"\nconst getId = (key) ->\n    if not key?\n        return String(key)\n    if typeof key is 'string' or typeof key is 'number' or typeof key is 'boolean'\n        return \"_\" + key\n    let id = key[idName]\n    if not id?\n        # checking the definition shouldn't be necessary.\n        # but nodejs has an object returning undefined\n        # even though the definition says it has a value.\n        let def = Object.getOwnPropertyDescriptor(key, idName)\n        if def?\n            id = def.value\n        else\n            id = ++uniqueCounter\n            Object.defineProperty(key, idName, {value:id})\n    return id\n\nconst MapShim(pairs) ->\n    if pairs?\n        throw new Error(\"Don't add items in the constructor, IE implementation of Set breaks this\")\n    let lookup = {}\n    let keys = []\n    const methods =\n        get: (key) -> lookup[getId(key)]\n        set: (key, value) ->\n            let id = getId(key)\n            if not lookup.hasOwnProperty(id)\n                keys.push(key)\n            lookup[id] = value\n            return value\n        has: (key) ->\n            let id = getId(key)\n            return lookup.hasOwnProperty(id)\n        delete: (key) ->\n            let id = getId(key)\n            keys.remove(key)\n            delete lookup[id]\n        clear: ->\n            lookup = {}\n            keys = []\n        forEach: (callback, thisArg) ->\n            for key in keys\n                let value = @get(key)\n                callback.call(thisArg, value, key, @)\n    for key, value of methods\n        Object.defineProperty(@, key, {value})\n\n# we will even replace Googles crap implementation of Map that doesn't yet have forEach\nif not global.Map?.prototype.forEach?\n    if global.window\n        console.warn('Shimming Map')\n    global.Map = MapShim\n\nexport const test = ->\n    const Map = global.Map\n    let map = new Map()\n    map.set('a', 1)\n    map.set('b', 2)\n    assert Object.keys(map).length is 0\n    assert map.has('a')\n    assert not map.has('c')\n    assert map.get('a') is 1\n    assert map.get('b') is 2\n    assert map.get('c') is undefined\n    let mykey1 = {}\n    map.set(mykey1, \"one\")\n    assert Object.keys(mykey1).length is 0\n    assert map.get(mykey1) is \"one\"\n"]}