{"version":3,"sources":["nodes.ion"],"names":["ion","CallExpression","location","MemberExpression","BlockStatement","isBlock","newScope","Program","reactive","FunctionExpression","isFunction","paramKind","shadow","FunctionDeclaration","Template","ForStatement","allowedInReactive","ForInStatement","ForOfStatement","ExportStatement","ClassExpression","ThrowStatement","TryStatement"],"mappings":"aAAA;AAAA,IAAMA,GAAA,G,OAAM,CAAO,KAAP,CAAZ;AAEO,IACHC,cAAA,G,QAAAA,c,GAAgB,EACZC,QAAA,EAAU,IADE,EADb,EAGHC,gBAAA,G,QAAAA,gB,GAAkB,EACdD,QAAA,EAAU,IADI,EAHf,EAKHE,cAAA,G,QAAAA,c,GAAgB;AAAA,QACZC,OAAA,EAAS,IADG;AAAA,QAEZC,QAAA,EAAU,IAFE;AAAA,KALb,EAQHC,OAAA,G,QAAAA,O,GAAS;AAAA,QACLF,OAAA,EAAS,IADJ;AAAA,QAELC,QAAA,EAAU,IAFL;AAAA,QAGLE,QAAA,EAAU,KAHL;AAAA,KARN,EAYHC,kBAAA,G,QAAAA,kB,GAAoB;AAAA,QAChBC,UAAA,EAAY,IADI;AAAA,QAEhBC,SAAA,EAAW,KAFK;AAAA,QAGhBL,QAAA,EAAU,IAHM;AAAA,QAIhBM,MAAA,EAAQ,IAJQ;AAAA,QAKhBJ,QAAA,EAAU,KALM;AAAA,KAZjB,EAkBHK,mBAAA,G,QAAAA,mB,GAAsBJ,kBAlBnB,EAmBHK,QAAA,G,QAAAA,Q,GAAU;AAAA,QACNJ,UAAA,EAAY,IADN;AAAA,QAENC,SAAA,EAAW,OAFL;AAAA,QAGNL,QAAA,EAAU,IAHJ;AAAA,QAINM,MAAA,EAAQ,IAJF;AAAA,QAKNJ,QAAA,EAAU,IALJ;AAAA,KAnBP,EAyBHO,YAAA,G,QAAAA,Y,GAAc;AAAA,QACVT,QAAA,EAAU,IADA;AAAA,QAEVU,iBAAA,EAAmB,KAFT;AAAA,KAzBX,EA4BHC,cAAA,G,QAAAA,c,GAAgB,EACZX,QAAA,EAAU,IADE,EA5Bb,EA8BHY,cAAA,G,QAAAA,c,GAAgB,EACZZ,QAAA,EAAU,IADE,EA9Bb,EAgCHa,eAAA,G,QAAAA,e,GAAiB,EACbH,iBAAA,EAAmB,KADN,EAhCd,EAkCHI,eAAA,G,QAAAA,e,GAAiB,EACbJ,iBAAA,EAAmB,KADN,EAlCd,EAoCHK,cAAA,G,QAAAA,c,GAAgB,EACZL,iBAAA,EAAmB,KADP,EApCb,EAsCHM,YAAA,G,QAAAA,Y,GAAc,EACVN,iBAAA,EAAmB,KADT,EAtCX","sourcesContent":["const ion = import '../'\n\nexport const\n    CallExpression =\n        location: true\n    MemberExpression =\n        location: true\n    BlockStatement =\n        isBlock: true\n        newScope: true\n    Program =\n        isBlock: true\n        newScope: true\n        reactive: false\n    FunctionExpression =\n        isFunction: true\n        paramKind: 'let'\n        newScope: true\n        shadow: true\n        reactive: false\n    FunctionDeclaration = FunctionExpression\n    Template =\n        isFunction: true\n        paramKind: 'const'\n        newScope: true\n        shadow: true\n        reactive: true\n    ForStatement =\n        newScope: true\n        allowedInReactive: false\n    ForInStatement =\n        newScope: true\n    ForOfStatement =\n        newScope: true\n    ExportStatement =\n        allowedInReactive: false\n    ClassExpression =\n        allowedInReactive: false\n    ThrowStatement =\n        allowedInReactive: false\n    TryStatement =\n        allowedInReactive: false\n"]}